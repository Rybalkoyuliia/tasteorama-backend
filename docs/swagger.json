{
  "openapi": "3.1.0",
  "info": {
    "version": "1.0.0",
    "title": "Tasteorama app",
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    },
    "description": "This is a documentation of Tasteorama app"
  },
  "servers": [
    {
      "url": "https://final-project-backend-rtvo.onrender.com"
    },
    {
      "url": "http://localhost:3000"
    }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Auth operations."
    },
    {
      "name": "Users",
      "description": "Operations about users."
    },
    {
      "name": "Favorites",
      "description": "Operations about user's favorite recipes."
    },
    {
      "name": "Categories",
      "description": "Operations about categories."
    },
    {
      "name": "Ingredients",
      "description": "Operations about ingredients."
    },
    {
      "name": "Recipes",
      "description": "Operations about recipes."
    }
  ],
  "paths": {
    "/api/auth/login": {
      "post": {
        "tags": [
          "Auth"
        ],
        "security": [],
        "summary": "Login user",
        "operationId": "loginUser",
        "description": "Authenticates a user with the provided email and password. On successful login, returns a random access token and user information. The access token must be used in the Authorization header for protected routes. If authentication fails (invalid credentials), a 401 response is returned.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password"
                ],
                "properties": {
                  "email": {
                    "description": "User's registered email address. Must be a valid email format (e.g., name@example.com) and no longer than 128 characters.",
                    "maxLength": 128,
                    "type": "string",
                    "example": "princessD@gmail.com"
                  },
                  "password": {
                    "description": "User's password. Must be between 8 and 128 characters.",
                    "minLength": 8,
                    "maxLength": 128,
                    "type": "string",
                    "example": "12345678"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successfully logged in",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully logged in!"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/api/auth/register": {
      "post": {
        "tags": [
          "Auth"
        ],
        "security": [],
        "summary": "Register user",
        "operationId": "registerUser",
        "description": "Registers a new user account with the provided email, password, and name. On success, returns the newly created user's basic information (excluding sensitive fields) and a confirmation message. If a user with the given email already exists, a 409 Conflict response is returned.",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "required": [
                  "email",
                  "password",
                  "name"
                ],
                "properties": {
                  "email": {
                    "description": "Must be a valid email address, no longer than 128 characters. Must be unique.",
                    "maxLength": 128,
                    "type": "string",
                    "example": "princessD@gmail.com"
                  },
                  "password": {
                    "description": "Password must be between 8 and 128 characters.",
                    "minLength": 8,
                    "maxLength": 128,
                    "type": "string",
                    "example": "12345678"
                  },
                  "name": {
                    "description": "User's display name. Maximum length - 16 characters.",
                    "maxLength": 16,
                    "type": "string",
                    "example": "Diana princess of Wales"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully register",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully registered a user!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/user"
                    }
                  }
                }
              }
            }
          },
          "409": {
            "$ref": "#/components/responses/409"
          }
        }
      }
    },
    "/api/auth/logout": {
      "post": {
        "tags": [
          "Auth"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Logout user",
        "operationId": "logoutUser",
        "description": "Logs out the currently authenticated user by invalidating their session. Requires a valid access token to identify and authorize the user. This operation typically removes the associated session from the database and/or clears authentication cookies. Returns HTTP 204 (No Content) on success. If the access token is missing or invalid, a 401 Unauthorized error is returned.",
        "responses": {
          "204": {
            "description": "Successfully logout"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/api/auth/refresh": {
      "post": {
        "tags": [
          "Auth"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Refresh session",
        "operationId": "refreshPage",
        "description": "Refreshes the user's access token using a valid refresh token. Returns a new access token for continued authentication.",
        "responses": {
          "200": {
            "description": "Refreshes the access token using a valid sessionId and refreshToken from cookies. Requires valid Bearer token (accessToken) and cookies.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 200
                    },
                    "message": {
                      "type": "string",
                      "example": "Session has been refreshed"
                    },
                    "data": {
                      "type": "object",
                      "required": [
                        "accessToken"
                      ],
                      "properties": {
                        "accessToken": {
                          "type": "string",
                          "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "get": null,
        "tags": [
          "Users"
        ],
        "summary": "Get current user",
        "description": "Get the currently authenticated user",
        "operationId": "getCurrentUser",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "Successfully retrieved current user",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/user"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized â€” token is missing or invalid",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/401"
                }
              }
            }
          }
        }
      }
    },
    "/api/users/favorites": {
      "get": {
        "tags": [
          "Favorites"
        ],
        "summary": "Get user's favorite recipes",
        "description": "Returns a list of recipes marked as favorite by the authenticated user.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "responses": {
          "200": {
            "description": "A list of favorite recipes",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/recipe"
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/api/users/favorites/{id}": {
      "post": {
        "tags": [
          "Favorites"
        ],
        "summary": "Add recipe to favorites",
        "description": "Adds the specified recipe to the authenticated user's list of favorites.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the recipe"
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe added to favorites"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      },
      "delete": {
        "tags": [
          "Favorites"
        ],
        "summary": "Remove recipe from favorites",
        "description": "Removes the specified recipe from the authenticated user's list of favorites.",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "ID of the recipe"
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe removed from favorites"
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/api/categories": {
      "get": {
        "tags": [
          "Categories"
        ],
        "summary": "Get all recipe categories",
        "description": "Returns a list of all recipe categories from the database",
        "responses": {
          "200": {
            "description": "A list of categories",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/category"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/ingredients": {
      "get": {
        "tags": [
          "Ingredients"
        ],
        "summary": "Get all ingredients",
        "description": "Returns a list of all ingredients from the database",
        "responses": {
          "200": {
            "description": "A list of ingredients",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ingredient"
                  }
                }
              }
            }
          },
          "500": {
            "description": "Server error"
          }
        }
      }
    },
    "/api/recipes": {
      "post": {
        "tags": [
          "Recipes"
        ],
        "summary": "Create recipe",
        "operationId": "createRecipe",
        "description": "Create a recipe",
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "required": [
                  "title",
                  "description",
                  "time",
                  "calories",
                  "category",
                  "ingredients",
                  "instructions",
                  "thumb"
                ],
                "properties": {
                  "title": {
                    "description": "Recipe's name. Should be max 64 symbols.",
                    "type": "string",
                    "example": "Battenberg Cake"
                  },
                  "description": {
                    "description": "Recipe's description. Should be max 200 symbols.",
                    "type": "string",
                    "example": "A classic British cake made with almond sponge cake and covered with marzipan. It is traditionally pink and yellow checkered in appearance."
                  },
                  "time": {
                    "description": "Recipe's time. Should be between 1 and max 360.",
                    "type": "string",
                    "example": "60"
                  },
                  "calories": {
                    "description": "Recipe's calories. Should be between 1 and 1000",
                    "type": "string",
                    "example": "500"
                  },
                  "category": {
                    "description": "Recipe's category.",
                    "type": "string",
                    "example": "Cake"
                  },
                  "ingredients": {
                    "description": "Recipe's ingredients.",
                    "type": "array",
                    "example": [
                      {
                        "name": "Eggs",
                        "amount": "4 wholes"
                      }
                    ]
                  },
                  "instructions": {
                    "description": "Recipe's instructions.",
                    "type": "string",
                    "example": "Bake two sponge cakes (one almond, one pink without almond extract) at 180Â°C in a lined 20cm tin, 25â€“30 mins each. Cut each cake into 4 equal strips and assemble alternating colours with apricot jam, forming a checkerboard. Wrap in rolled marzipan, seal and trim edges, then crimp or decorate if desired. Store airtight or freeze."
                  },
                  "thumb": {
                    "description": "Recipe's thumb",
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successfully created new recipe!",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "required": [
                    "status",
                    "message",
                    "data"
                  ],
                  "properties": {
                    "status": {
                      "type": "integer",
                      "example": 201
                    },
                    "message": {
                      "type": "string",
                      "example": "Successfully created new recipe!"
                    },
                    "data": {
                      "$ref": "#/components/schemas/recipe"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "$ref": "#/components/responses/401"
          }
        }
      }
    },
    "/api/recipes/{id}": {
      "get": {
        "tags": [
          "Recipes"
        ],
        "summary": "Get recipe by ID",
        "description": "Returns a specific recipe by its MongoDB ObjectId",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "schema": {
              "type": "string",
              "example": "6462a8f74c3d0ddd28898047"
            },
            "description": "ID of the recipe"
          }
        ],
        "responses": {
          "200": {
            "description": "Recipe found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/recipe"
                }
              }
            }
          },
          "400": {
            "description": "Invalid recipe ID format"
          },
          "404": {
            "description": "Recipe not found"
          }
        }
      },
      "delete": {
        "tags": [
          "Recipes"
        ],
        "security": [
          {
            "bearerAuth": []
          }
        ],
        "summary": "Delete own recipe by ID",
        "operationId": "deleteOwnRecipe",
        "description": "Only the owner of the recipe has permission to delete it.",
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "description": "Unique identifier of the recipe to delete",
            "schema": {
              "type": "string",
              "example": "6462a8f74c3d0ddd28898047"
            }
          }
        ],
        "responses": {
          "204": {
            "description": "Recipe successfully deleted"
          },
          "400": {
            "$ref": "#/components/responses/400"
          },
          "401": {
            "$ref": "#/components/responses/401"
          },
          "403": {
            "$ref": "#/components/responses/403"
          },
          "404": {
            "$ref": "#/components/responses/404"
          }
        }
      }
    }
  },
  "components": {
    "securitySchemes": {
      "bearerAuth": {
        "type": "http",
        "scheme": "bearer"
      }
    },
    "schemas": {
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "Category": {
        "$ref": "#/components/schemas/category"
      },
      "Ingredient": {
        "$ref": "#/components/schemas/ingredient"
      },
      "user": {
        "type": "object",
        "required": [
          "_id",
          "name",
          "email",
          "password"
        ],
        "properties": {
          "_id": {
            "description": "User's id",
            "type": "string",
            "example": "6861e7defc6d069ef6e928fd"
          },
          "name": {
            "description": "User's name",
            "type": "string",
            "example": "Diana Princess of Wales"
          },
          "email": {
            "description": "User's email",
            "type": "string",
            "example": "princessD@gmail.com"
          },
          "password": {
            "type": "string",
            "format": "password",
            "writeOnly": true,
            "description": "User's hashed password (bcrypt)",
            "example": "$2b$10$2f21npH8P5nSxMb3qtim1.Zw0Fpilj5eTuqbWCuPWUKFvyYm.uqTO"
          },
          "favorites": {
            "type": "array",
            "description": "IDs of user's favorite recipes",
            "items": {
              "type": "string",
              "example": "64f8aef1b29a0c1b7b123456"
            }
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Date of user creation",
            "example": "2025-07-14T11:45:51.607Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Date of last user update",
            "example": "2025-07-14T11:45:51.607Z"
          }
        }
      },
      "recipe": {
        "type": "object",
        "required": [
          "title",
          "description",
          "time",
          "calories",
          "category",
          "ingredients",
          "instructions",
          "thumb"
        ],
        "properties": {
          "title": {
            "description": "Recipe's title",
            "type": "string",
            "maxLength": 64,
            "example": "Battenberg Cake"
          },
          "description": {
            "description": "Short description of the recipe",
            "type": "string",
            "maxLength": 200,
            "example": "Classic British cake with almond sponge and marzipan."
          },
          "time": {
            "description": "Preparation and cooking time in minutes",
            "type": "integer",
            "minimum": 1,
            "maximum": 360,
            "example": 60
          },
          "calories": {
            "description": "Total number of calories in the recipe",
            "type": "integer",
            "minimum": 1,
            "maximum": 10000,
            "example": 500
          },
          "category": {
            "description": "Category of the recipe (e.g., Dessert, Salad)",
            "type": "string",
            "example": "Dessert"
          },
          "ingredients": {
            "description": "List of ingredients, each with name and amount",
            "type": "array",
            "items": {
              "type": "object",
              "required": [
                "name",
                "amount"
              ],
              "properties": {
                "name": {
                  "type": "string",
                  "example": "Eggs"
                },
                "amount": {
                  "type": "string",
                  "example": "4 whole"
                }
              }
            },
            "example": [
              {
                "name": "Eggs",
                "amount": "4 whole"
              },
              {
                "name": "Sugar",
                "amount": "100g"
              }
            ]
          },
          "instructions": {
            "description": "Step-by-step cooking instructions",
            "type": "string",
            "maxLength": 1200,
            "example": "Bake two sponge cakes at 180Â°C for 25â€“30 mins. Cool, cut, and assemble in a checkerboard with apricot jam. Wrap with marzipan.\n"
          },
          "thumb": {
            "description": "URL to the recipe preview image",
            "type": "string",
            "format": "uri",
            "example": "https://ftp.goit.study/img/so-yummy/preview/Battenberg%20Cake.jpg"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of recipe creation",
            "example": "2025-07-14T11:45:51.607Z"
          },
          "updatedAt": {
            "type": "string",
            "format": "date-time",
            "readOnly": true,
            "description": "Timestamp of last recipe update",
            "example": "2025-07-14T11:45:51.607Z"
          }
        }
      },
      "category": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "64b76f1345eabf0012345678"
          },
          "name": {
            "type": "string",
            "example": "Desserts"
          }
        },
        "required": [
          "_id",
          "name"
        ]
      },
      "ingredient": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "640c2dd963a319ea671e37aa"
          },
          "name": {
            "type": "string",
            "example": "Squid"
          },
          "desc": {
            "type": "string",
            "example": "A type of cephalopod with a soft, cylindrical body and long tentacles, often used in seafood dishes such as calamari or grilled squid."
          },
          "img": {
            "type": "string",
            "format": "uri",
            "example": "https://ftp.goit.study/img/so-yummy/ingredients/640c2dd963a319ea671e37aa.png"
          }
        },
        "required": [
          "_id",
          "name"
        ]
      }
    },
    "responses": {
      "400": {
        "description": "Bad request error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 400
                },
                "message": {
                  "type": "string",
                  "example": "BadRequestError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Invalid data"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "401": {
        "description": "Unauthorized error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 401
                },
                "message": {
                  "type": "string",
                  "example": "UnauthorizedError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "403": {
        "description": "Forbidden error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 403
                },
                "message": {
                  "type": "string",
                  "example": "ForbiddenError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Action not allowed"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "404": {
        "description": "Not found error",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 404
                },
                "message": {
                  "type": "string",
                  "example": "NotFoundError"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "The requested item was not found"
                    }
                  }
                }
              }
            }
          }
        }
      },
      "409": {
        "description": "Conflict",
        "content": {
          "application/json": {
            "schema": {
              "type": "object",
              "required": [
                "status",
                "message",
                "data"
              ],
              "properties": {
                "status": {
                  "type": "integer",
                  "example": 409
                },
                "message": {
                  "type": "string",
                  "example": "Conflict"
                },
                "data": {
                  "type": "object",
                  "required": [
                    "message"
                  ],
                  "properties": {
                    "message": {
                      "type": "string",
                      "example": "Data in use"
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}